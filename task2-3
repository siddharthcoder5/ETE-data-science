from flask import Flask, request, jsonify
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Step 1: Data Collection and Preprocessing
data = {
    "age": [25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
    "salary": [30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000],
    "purchased": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1]
}
df = pd.DataFrame(data)

# Features and target
X = df[["age", "salary"]]
y = df["purchased"]

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 2: Model Training
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

# Save the model
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

# Step 3: Develop Flask API
app = Flask(__name__)

@app.route("/predict", methods=["POST"])
def predict():
    try:
        # Parse input JSON
        data = request.json
        age = data.get("age")
        salary = data.get("salary")

        # Validate input
        if age is None or salary is None:
            return jsonify({"error": "Invalid input. 'age' and 'salary' are required."}), 400

        # Load the trained model
        with open("model.pkl", "rb") as f:
            model = pickle.load(f)

        # Make prediction
        prediction = model.predict([[age, salary]])
        result = "Purchased" if prediction[0] == 1 else "Not Purchased"

        return jsonify({"age": age, "salary": salary, "prediction": result})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Step 4: Run the Flask App
if __name__ == "__main__":
    app.run(debug=True)
